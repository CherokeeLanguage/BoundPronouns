buildscript {
    repositories {
        mavenCentral()        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'org.robovm:robovm-gradle-plugin:1.9.0'
    }
}

allprojects {
    apply plugin: "eclipse"
    //apply plugin: "idea"
	eclipse {
	    classpath {
	       downloadSources=true
	    }
	}
    version = '1.91'
    ext {
        appName = 'BoundPronouns'
        gdxVersion = '1.7.1'
        roboVMVersion = '1.9.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

/*
def RTJAR = '/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar';
	if (new File(RTJAR).exists()) {
		compileJava.options.bootClasspath=RTJAR
	}
	*/

project(":desktop") {
    apply plugin: "java"
	sourceCompatibility = 1.7
	archivesBaseName = 'BoundPronouns'

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
		//FOR DESKTOP GOOGLE API
        compile 'com.google.apis:google-api-services-games:v1-rev125-1.20.0'
        compile 'com.google.apis:google-api-services-drive:v2-rev183-1.20.0'
        compile 'com.google.oauth-client:google-oauth-client-java6:1.20.0'
        compile 'com.google.oauth-client:google-oauth-client-jetty:1.20.0'
    }
    eclipseJdt << {
	    File f = file('.settings/org.eclipse.core.resources.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('encoding/<project>=utf-8')
	    f = file('.settings/org.eclipse.core.runtime.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('line.separator=\\n\n')
	}
	project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}}
}

project(":android") {
    apply plugin: "android"
	sourceCompatibility = 1.7
    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        
        compile 'org.apache.commons:commons-csv:1.1'
        compile 'org.apache.commons:commons-lang3:3.1'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.5.0'
        
        //FOR ANDROID GOOGLE API
        compile ('com.google.apis:google-api-services-games:v1-rev125-1.20.0') {
			exclude module: 'httpclient'
			exclude module: 'xpp3'
			exclude module: 'junit'
			exclude module: 'android'
		}
        compile ('com.google.apis:google-api-services-drive:v2-rev183-1.20.0') {
			exclude module: 'httpclient'
			exclude module: 'xpp3'
			exclude module: 'junit'
			exclude module: 'android'
		}
        compile 'com.google.oauth-client:google-oauth-client-java6:1.20.0' exclude module: 'httpclient'
		compile 'com.google.api-client:google-api-client-android:1.20.0' exclude module: 'httpclient'
    }
    eclipseJdt << {
	    File f = file('.settings/org.eclipse.core.resources.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('encoding/<project>=utf-8')
	    f = file('.settings/org.eclipse.core.runtime.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('line.separator=\\n\n')
	}
	project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}}
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"
    sourceCompatibility = 1.7
    configurations { natives }

    dependencies {
        compile project(":core")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
        
        compile 'org.apache.commons:commons-csv:1.1'
        compile 'org.apache.commons:commons-lang3:3.1'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.5.0'
        
        //FOR IOS GOOGLE API
         compile ('com.google.apis:google-api-services-games:v1-rev125-1.20.0') {
			exclude module: 'httpclient'
			exclude module: 'xpp3'
			exclude module: 'junit'
			exclude module: 'android'
		}
        compile ('com.google.apis:google-api-services-drive:v2-rev183-1.20.0') {
			exclude module: 'httpclient'
			exclude module: 'xpp3'
			exclude module: 'junit'
			exclude module: 'android'
		}
        compile 'com.google.oauth-client:google-oauth-client-java6:1.20.0' exclude module: 'httpclient'
		compile 'com.google.api-client:google-api-client-android:1.20.0' exclude module: 'httpclient'
    }
    
    robovm {
    		//iosSignIdentity = "iPhone Distribution: Michael Joyner"
    		//iosProvisioningProfile = 'iOS Store General Profile'
    		iosSignIdentity = "iPhone Developer: Michael Joyner (7T8K4MBSQ2)"
    		iosProvisioningProfile = "iOSTeam Provisioning Profile: *"
    		iosSkipSigning = false;
    		stdoutFifo = ""
    		stderrFifo = ""
    		archs = "thumbv7:arm64"
    }
    
    eclipseJdt << {
	    File f = file('.settings/org.eclipse.core.resources.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('encoding/<project>=utf-8')
	    f = file('.settings/org.eclipse.core.runtime.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('line.separator=\\n\n')
	}
	project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}}
}

project(":core") {
    apply plugin: "java"
	sourceCompatibility = 1.7
    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        
        compile 'org.apache.commons:commons-csv:1.1'
        compile 'org.apache.commons:commons-lang3:3.1'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.5.0'
    }
    eclipseJdt << {
	    File f = file('.settings/org.eclipse.core.resources.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('encoding/<project>=utf-8')
	    f = file('.settings/org.eclipse.core.runtime.prefs')
	    f.write('eclipse.preferences.version=1\n')
	    f.append('line.separator=\\n\n')
	}
	project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}}
}

tasks.eclipse.doLast {
    delete ".project"
}
